#ifndef _CACHEPP_SIMPLESERIALCACHE_TEMPLATE
#define _CACHEPP_SIMPLESERIALCACHE_TEMPLATE

#include "libs/exceptionpp/exception.h"

#include "src/simpleserialcache.h"

template <typename T> cachepp::SimpleSerialCache<T>::SimpleSerialCache(cachepp::identifier size) : cachepp::SerialCache<cachepp::SimpleSerialCacheData, T>::SerialCache(size) {
	for(cachepp::identifier i = 0; i < this->size; ++i) {
		this->access_data.push_back(0);
	}
}

template <typename T> void cachepp::SimpleSerialCache<T>::access(const std::shared_ptr<T>& arg, cachepp::SimpleSerialCacheData aux) {
	if(!this->in(arg)) {
		throw(exceptionpp::RuntimeError("cachepp::SimpleSerialCache::access", "attempting to access a cache line which is not loaded"));
	}
	this->access_data.at(this->index(arg))++;
}

/**
 * takes in an object and returns an index to the auxiliary data
 */
template <typename T> cachepp::identifier cachepp::SimpleSerialCache<T>::index(const std::shared_ptr<T>& arg) {
	return(arg->get_identifier() % this->size);
}

/**
 * returns the number of times the cache line has been accessed
 *
 * decrements the number per query to ensure semblance of fairness
 */
template <typename T> size_t cachepp::SimpleSerialCache<T>::heuristic(const std::shared_ptr<T>& arg) {
	cachepp::identifier h = this->access_data.at(this->index(arg));
	this->access_data.at(this->index(arg)) = h == 0 ? 0 : h - 1;
	return(h);
}

#endif
