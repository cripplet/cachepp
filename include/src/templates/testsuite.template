#ifndef _CACHEPP_TESTSUITE_TEMPLATE
#define _CACHEPP_TESTSUITE_TEMPLATE

#include <atomic>
#include <memory>
#include <random>
#include <thread>

#include "src/testsuite.h"

template <typename X, typename D, typename T> cachepp::TestSuite<X, D, T>::TestSuite(const std::shared_ptr<X>& cache) : cache(cache), result(cachepp::TestResult()) {}

template <typename X, typename D, typename T> cachepp::TestResult cachepp::TestSuite<X, D, T>::get_result() { return(this->result); }

template <typename X, typename D, typename T> void cachepp::TestSuite<X, D, T>::correctness(std::vector<std::shared_ptr<T>>& lines, size_t n_attempts, bool is_parallel, size_t n_threads) {
	if(is_parallel & !this->cache->get_is_thread_safe()) {
		throw(exceptionpp::InvalidOperation("cachepp::TestSuite::correctness", "attempting to run a cache test in parallel on a non-thread-safe cache"));
	}
	if((!is_parallel && (n_threads != 0)) || (is_parallel && (n_threads == 0))) {
		throw(exceptionpp::InvalidOperation("cachepp::TestResult::push_back", "is_parallel and n_thread provide conflicting data"));
	}

	std::shared_ptr<std::atomic<size_t>> n_success (new std::atomic<size_t>(0));

	if(!is_parallel) {
		this->aux_correctness(n_success, lines, n_attempts);
		if(*n_success != 1) {
			throw(exceptionpp::RuntimeError("cachepp::TestSuite::correctness", "correctness test failed"));
		}
	} else {
		throw(exceptionpp::NotImplemented("cachepp::TestSuite::correctness(is_parallel = true)"));
	}
}

template <typename X, typename D, typename T> void cachepp::TestSuite<X, D, T>::aux_correctness(std::shared_ptr<std::atomic<size_t>> n_success, std::vector<std::shared_ptr<T>>& lines, size_t n_attempts) {
	size_t local_n_success = 0;
	for(size_t i = 0; i < n_attempts; ++i) {
		cachepp::identifier index = rand() % lines.size();
		this->cache->acquire(lines.at(index), D());
		local_n_success += lines.at(index)->get_is_loaded();
		this->cache->release(lines.at(index));
	}
	*n_success += (local_n_success == n_attempts);
}

#endif
