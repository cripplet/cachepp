#ifndef _CACHEPP_CACHEINTERFACE_TEMPLATE
#define _CACHEPP_CACHEINTERFACE_TEMPLATE

#include "libs/exceptionpp/exception.h"

#include "src/cacheinterface.h"

template <typename C, typename D, typename T> cachepp::CacheInterface<C, D, T>::CacheInterface(cachepp::identifier size, bool is_thread_safe) : size(size), is_thread_safe(is_thread_safe), n_acquire(0), n_miss(0) {}

template <typename C, typename D, typename T> std::vector<uint8_t> cachepp::CacheInterface<C, D, T>::r(const std::shared_ptr<T>& arg, D aux) {
	this->acquire(arg, aux);
	std::vector<uint8_t> val = arg->get_data();
	this->release(arg);
	return(val);
}

template <typename C, typename D, typename T> void cachepp::CacheInterface<C, D, T>::w(const std::shared_ptr<T>& arg, std::vector<uint8_t> val, D aux) {
	this->acquire(arg, aux);
	arg->set_data(val);
	this->release(arg);
}

template <typename C, typename D, typename T> double cachepp::CacheInterface<C, D, T>::get_miss_rate() {
	if(this->n_acquire == 0) {
		throw(exceptionpp::RuntimeError("cachepp::CacheInterface::get_miss_rate", "divide by zero"));
	}
	return((double) ((double) this->n_miss / this->n_acquire));
}

template <typename C, typename D, typename T> void cachepp::CacheInterface<C, D, T>::reset() {
	this->n_acquire = 0;
	this->n_miss = 0;
	this->clear();
}

template <typename C, typename D, typename T> cachepp::identifier cachepp::CacheInterface<C, D, T>::get_size() { return(this->size); }

template <typename C, typename D, typename T> bool cachepp::CacheInterface<C, D, T>::get_is_thread_safe() { return(this->is_thread_safe); }

#endif
