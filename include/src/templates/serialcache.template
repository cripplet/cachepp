#ifndef _CACHEPP_SERIALCACHE_TEMPLATE
#define _CACHEPP_SERIALCACHE_TEMPLATE

#include <type_traits>

#include "libs/exceptionpp/exception.h"

#include "src/serialcache.h"

template <typename D, typename T> cachepp::SerialCache<D, T>::SerialCache(cachepp::identifier size) : cachepp::CacheInterface<std::map<identifier, std::shared_ptr<T>>, D, T>::CacheInterface(size, false) {}

template <typename D, typename T> void cachepp::SerialCache<D, T>::acquire(const std::shared_ptr<T>& arg, D aux) {
	this->n_acquire++;
	if(!this->in(arg)) {
		this->n_miss++;
		this->allocate(arg);
	}
	this->access(arg, aux);
}

template <typename D, typename T> void cachepp::SerialCache<D, T>::release(const std::shared_ptr<T>& arg) {
	throw(exceptionpp::NotImplemented("cachepp::SerialCache::release"));
}

template <typename D, typename T> void cachepp::SerialCache<D, T>::clear() {
	for(typename std::map<cachepp::identifier, std::shared_ptr<T>>::iterator it = this->cache.begin(); it != this->cache.end();) {
		it->second->unload();
		this->cache.erase(it++);
	}
}

template <typename D, typename T> void cachepp::SerialCache<D, T>::remove(const std::shared_ptr<T>& arg) {
	if(this->in(arg)) {
		arg->unload();
		this->cache.erase(arg->get_identifier());
	}
}

template <typename D, typename T> bool cachepp::SerialCache<D, T>::in(const std::shared_ptr<T>& arg) {
	return(this->cache.count(arg->get_identifier()) == 1);
}

template <typename D, typename T> void cachepp::SerialCache<D, T>::allocate(const std::shared_ptr<T>& arg) {
	if(this->cache.size() >= this->size) {
		this->remove(this->select());
	}
	arg->load();
	this->cache.insert(std::pair<cachepp::identifier, std::shared_ptr<T>> (arg->get_identifier(), arg));
}

template <typename D, typename T> std::shared_ptr<T> cachepp::SerialCache<D, T>::select() {
	bool is_set = false;
	cachepp::identifier heuristic = 0;
	cachepp::identifier target = 0;
	for(typename std::map<cachepp::identifier, std::shared_ptr<T>>::iterator it = this->cache.begin(); it != this->cache.end(); ++it) {
		cachepp::identifier  h = this->heuristic(it->second);
		if((h <= heuristic) || !is_set) {
			is_set = true;
			heuristic = h;
			target = it->first;
		}
	}
	if(!is_set) {
		throw(exceptionpp::RuntimeError("cachepp::ConcurrentCache::select", "cannot find a target to evict"));
	}
	return(this->cache.at(target));
}

#endif
